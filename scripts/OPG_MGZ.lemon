// Spinning tops fade in and out when you jump off them
//# address-hook(0x034d92) end(0x034db6)
function void fn034d92()
{
    base.fn034d92()
    if (!checkForUnloadObjectAtPosition(objA0.position.x.u16))
        objA0.render_flags = (global.framecounter.low & 0x01) ? render_flag.WORLD : 0
}

// MGZ Blue Wheel sounds part 1
//# address-hook(0x025d9c) end(0x025ea0)
function void fn025d9c()
{
    if (!isSawnic())
    {
        D1.u16 = 0x1b
        D2.u16 = 0x10
        D4.u16 = objA0.position.x.u16
        A2 = 0x025f0e
        fn01dd0e()

        D6 = (D6 << 16) + (D6 >> 16)
        D6.u16 &= 0x33
        if (D6.u16 != 0)
        {
            D0.u8 = D6.u8 & 0x11
            if (D0.u8 != 0)
            {
                A1 = 0xffffb000
                if (objA1.state == char.state.SPINDASH)
                {
                    if (u8[A5 + 0x2c] == 1)
                    {
                        playSound(0x8e) // Plays a new sound
                        u8[A5 + 0x2c] = 0
                    }
                }
                else
                    u8[A5 + 0x2c] = 1
            }

            D6.u8 &= 0x22
            if (D6.u8 != 0)
            {
                A1 = 0xffffb04a
                if (objA1.state == char.state.SPINDASH)
                {
                    if (u8[A6 + 0x2c] == 1)
                    {
                        playSound(0x8e) // Plays a new sound
                        u8[A6 + 0x2c] = 0
                    }
                }
                else
                    u8[A6 + 0x2c] = 1
            }
        }
    }
    base.fn025d9c()
}

// MGZ Blue Wheel sounds part 2
// The part where you bounce around on the wheels
//# address-hook(0x025ea6) end(0x025f0c)
function void fn025ea6()
{
    if (!isSawnic())
    {
        playSound(0x8e)
    }
    base.fn025ea6()
}

// Makes the characters play the running rotation animation in the halls of MGZ, while on the tops
// and uncurls the character if they roll onto the trigger
// part 1
define bool OPG_GetCharHeight = u8[0xffffEF7E + ((A1 == 0xffffb000) ? 0 : 0x01)] // Get's the character's height
global bool OPG_IsHallExitLeft // Determine whether or not the character on a top is going to come out of the left exit
global bool OPG_HallSpecialCase // A unqiue case where the character might be entering in from the left side, but exits on the left side of another plane
//# address-hook(0x035868) end(0x035962)
function void fn035868() // Going through a vertical hall in MGZ
{
	if (u8[A0 + 0x35] != 2)
	{
		--objA0.value3a
		if (s8[A0 + 0x3a] < 0)
		{
			if (u8[A0 + 0x35] == 3)
			{
				if (s8[A0 + 0x3e] < 0)
				{
					objA0.groundspeed = -objA0.groundspeed
				}
				u8[A0 + 0x35] = 0
				return
			}

			u16[A0 + 0x3c] = 0
			u8[A0 + 0x35] = 2

			A1 = u32[A0 + 0x36]
			D0.u16 = u16[(A1+=2)-2]
			objA0.countdown_value = D0.u16

			D1.u8 = u8[A0 + 0x3f] & 0x7f
			if (D1.u8 != 0)
			{
                objA0.flags2b = true // keeps track of which areas have unqiue exits that the top might come out of

                // 1 means the character is going to exit on the left
                // -127 means the character is going to exit on the right
                OPG_IsHallExitLeft = (s8[A0 + 0x3f] == 1) ? false : true

                // -128 means the character is entering from the left, and will exit through another left exit
                OPG_HallSpecialCase = (s8[A0 + 0x3e] == -128) ? true : false 
				u16[A0 + 0x3c] = D0.u16
			}
			u32[A0 + 0x36] = A1
		}
		else
		{
			D2 = objA0.position.x
			D3 = objA0.position.y
			D0.s32 = objA0.velocity.x
			D0.s32 <<= 8
			D2 += D0
			D0.s32 = objA0.velocity.y
			D0.s32 <<= 8
			D3 += D0
			objA0.position.x = D2
			objA0.position.y = D3
			return
		}
	}

	D0.u16 = u16[A0 + 0x3c] * 2
	if (s8[A0 + 0x3f] < 0)
	{
		D0.s16 = -D0.s16
	}
    u8 anims = (D0.u8 / 0x16)
	LookupSinCos()
	D0.s32 = s32(D0.s16) * 0x5800
	objA0.position.x.u16 = (D0 >> 16) + u16[A0 + 0x30]
	objA0.position.y.u16 = objA0.value32 + u16[A0 + 0x3c]

    u32 Addressbackup = A1
    A1 = 0xffffb000
    OPG_MGZHallRunning(anims)

    if (getNumPlayers() == 2)
    {
        A1 = 0xffffb04a
        OPG_MGZHallRunning(anims)
    }

    A1 = Addressbackup

	D0.u16 = abs(objA0.groundspeed)
	D1 = (D0.u16 == 0x0c00) ? 3 : 2

	D0.u8 = u8[A0 + 0x3f] & 0x7f
	if (D0.u8 != 0)
	{
		u16[A0 + 0x3c] -= D1.u16
		if (s16[A0 + 0x3c] > 0)
			return
	}
	else
	{
		u16[A0 + 0x3c] += D1.u16
		if (u16[A0 + 0x3c] < objA0.countdown_value)
			return
	}

    objA0.flags2b = false // Not in the halls

	u8[A0 + 0x35] = 3
	A2 = u32[A0 + 0x36]
	D4.u16 = u16[(A2+=2)-2]
	D5.u16 = u16[(A2+=2)-2]
	D2.u16 = abs(objA0.groundspeed)
	if (D2.u16 == 0)
	{
		D2.u16 = 0x0800
	}
	fn035706()
}

// part 2
function void OPG_MGZHallRunning(u8 anims)
{
    if (u8[A1 + 0x37] == 0x80) // if the character is on the top
    {
        if (objA0.flags2b)
        {
            if (OPG_HallSpecialCase) // Stupidly specific case where the characters might not flip correctly
                u8[A1 + 0x04] |= render_flag.FLIP_X
            else if (OPG_IsHallExitLeft)
                u8[A1 + 0x04] &= ~render_flag.FLIP_X // This makes sure the sprites are properly flipped
        }

        OPG_GetCharHeight = (u8[A1 + 0x44] >= 0x13) ? false : true
        u8[A1 + 0x22] = u8[0x04247e + anims]

        D0 = u8[A1 + 0x22]

        SetCharacterSpritePatterns()
    }
}

// part 3
//# address-hook(0x035202) end(0x035268)
function void fn035202() // Where the character is on the top
{
    if (u8[A1 + 0x37] == 0x80 && objA1.state == char.state.ROLLING) // Uncurls the player on the tops
    {
        u8[A1 + 0x2a] &= ~char.flag.ROLLING
        objA1.state = char.state.RUNNING
    }
    if (u8[A0 + 0x35] == 2) // The top is in the halls
    {
        if (u8[A1 + 0x37] == 0x80 && (u8[A1 + 0x2a] & char.flag.ON_OBJECT) == 0) && (u8[A1 + 0x22] >= 0xef && u8[A1 + 0x22] <= 0xfa)
        {
            // Determine how many pixels the character should be moved depending on their size.
            // If the character is the size of Sonic or Knuckles, move them down by 2 pixels.
            // If the character is the size of Tailss, move them up by 2 pixels.
            u16 HowTall = (OPG_GetCharHeight) ? -2 : 2
            objA1.position.x.u16 = objA0.position.x.u16
            objA1.position.y.u16 = objA0.position.y.u16 - u8[A1 + 0x44] - 0x0c + (HowTall)
            u8[A0 + 0x2d] = 0
            return
        }
    }
    base.fn035202()
}

// Characters wobble when the Egg Drillster Mk. II slams into the terrain in MGZ's act 2 boss fight
//# address-hook(0x05180a) end(0x05183c)
function void fn05180a()
{
    base.fn05180a()
    if (objA0.flags2a & object.flag.P1_ON_OBJECT) // Only do this when the character has landed on the floor
    {
        A1 = 0xffffb000
        u8[A1 + 0x20] = char.state.BALANCING1
        u8[A1 + 0x2e] = 0x01
    }

    if (getNumPlayers() == 2)
    {
        if (objA0.flags2a & object.flag.P2_ON_OBJECT)
        {
            A1 = 0xffffb04a
            u8[A1 + 0x20] = char.state.BALANCING1
            u8[A1 + 0x2e] = 0x01
        }
    }
}