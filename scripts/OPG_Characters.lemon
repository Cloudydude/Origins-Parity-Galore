global bool OPG_Sonic_Sleep

// Sonic sleeping animation
global u16 SonicGoesToSleepCounter

function u64 Standalone.getModdedAnimationSpriteKey(u8 character, u16 animationSpriteEx)
{
	u64 key = 0

	if (char.mapping_offset == 0x146620 && !u8[0xffffe654] && !(char.control_flags & 0x01) && OPG_Sonic_Sleep && debug_mode.state == 0)
	{
		if (char.state == char.state.STANDING) // Only when Sonic is standing, and not being controlled by the game
		{
			if (SonicGoesToSleepCounter < 3176)
				SonicGoesToSleepCounter++
			
			if (SonicGoesToSleepCounter >= 2896 && SonicGoesToSleepCounter <= 3148) // Slow foot tap
			{
				u8 animation = ((global.framecounter >> 4) % (2))
				key = stringformat("Sonic_Sleep_%d", animation)
				if (!Renderer.hasCustomSprite(key))
					key = Renderer.setupCustomCharacterSprite(0x100000, 0x148182, 0x146620, animation + 0xbf, 0x00)
			}
			else if (SonicGoesToSleepCounter >= 3149 && SonicGoesToSleepCounter <= 3174) // Lower head part 1
			{
				key = "Sonic_Sleep_2"
				if (!Renderer.hasCustomSprite(key))
					key = Renderer.setupCustomCharacterSprite(0x100000, 0x148182, 0x146620, 0xc1, 0x00)
			}
			else if (SonicGoesToSleepCounter >= 3175) // Lower head part 2
			{
				key = "Sonic_Sleep_3"
				if (!Renderer.hasCustomSprite(key))
					key = Renderer.setupCustomCharacterSprite(0x100000, 0x148182, 0x146620, 0xc2, 0x00)
			}

			return key
		}
		else
			SonicGoesToSleepCounter = 0 // If Sonic does anything besides being idle, or being controlled, reset the counter
	}

	return base.Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)
}

//Compatibility with sepereate super and hyper sprites
function u64 SeparateSprites.getSpriteKeyForCharacterRendering(u8 character, u8 animationSprite, u16 animationSpriteEx)
{
    u64 key = Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)
    if (char.mapping_offset == 0x146620 && !u8[0xffffe654] && !(char.control_flags & 0x01) && OPG_Sonic_Sleep && debug_mode.state == 0)
        return key

    return base.SeparateSprites.getSpriteKeyForCharacterRendering(character, animationSprite, animationSpriteEx)
}

// Untransform from a super state when you lose a life
// part 1
//# address-hook(0x010366) end(0x01036c)
function void Character.Die()
{
    DeactivateSuper()
    base.Character.Die()
}

// part 2
//# address-hook(0x01036e) end(0x0103b8)
function void Character.Die_internal()
{
    DeactivateSuper()
    base.Character.Die_internal()
}

// part 3
function void Character.Die_noSound()
{
    DeactivateSuper()
    base.Character.Die_noSound()
}

// part 4
function void DeactivateSuper()
{
    if A0 == 0xffffb000 && (super.active || super.active.tails)
        Character.cancelSuperTransformation()
}
