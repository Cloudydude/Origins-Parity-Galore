global bool OPG_Sonic_Sleep

// Sonic sleeping animation
global u16 SonicGoesToSleepCounter

function u64 Standalone.getModdedAnimationSpriteKey(u8 character, u16 animationSpriteEx)
{
	u64 key = 0

	if (char.mapping_offset == 0x146620 && !u8[0xffffe654] && !(char.control_flags & 0x01) && OPG_Sonic_Sleep && debug_mode.state == 0)
	{
		if (char.state == char.state.STANDING) // Only when Sonic is standing, and not being controlled by the game
		{
			if (SonicGoesToSleepCounter < 3239)
				SonicGoesToSleepCounter++


			if (SonicGoesToSleepCounter >= 2911 && SonicGoesToSleepCounter <= 3206) // Slower foot tap
			{
				u8 speed = (SonicGoesToSleepCounter >= 2911 && SonicGoesToSleepCounter <= 3059) ? 4 : 5
				u8 animation = ((global.framecounter >> speed) % (2))
				key = stringformat("Sonic_Sleep_%d", animation)
				if (!Renderer.hasCustomSprite(key))
					key = stringformat("character_sonic_0x%x", animation + 0xbf)
				if (!Renderer.hasCustomSprite(key))
					return Renderer.setupCustomCharacterSprite(0x100000, 0x148182, 0x146620, animation + 0xbf, 0x00)
			}
			else if (SonicGoesToSleepCounter >= 3207 && SonicGoesToSleepCounter <= 3237) // Lower head part 1
			{
				key = "Sonic_Sleep_2"
				if (!Renderer.hasCustomSprite(key))
					key = "character_sonic_0xc1"
				if (!Renderer.hasCustomSprite(key))
					return Renderer.setupCustomCharacterSprite(0x100000, 0x148182, 0x146620, 0xc1, 0x00)
			}
			else if (SonicGoesToSleepCounter >= 3238) // Lower head part 2
			{
				key = "Sonic_Sleep_3"
				if (!Renderer.hasCustomSprite(key))
					key = "character_sonic_0xc2"
				if (!Renderer.hasCustomSprite(key))
					return Renderer.setupCustomCharacterSprite(0x100000, 0x148182, 0x146620, 0xc2, 0x00)
			}

			return key
		}
		else
			SonicGoesToSleepCounter = 0 // If Sonic does anything besides being idle, or being controlled, reset the counter
	}

	return base.Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)
}

//Compatibility with sepereate super and hyper sprites
function u64 SeparateSprites.getSpriteKeyForCharacterRendering(u8 character, u8 animationSprite, u16 animationSpriteEx)
{
    u64 key = Standalone.getModdedAnimationSpriteKey(character, animationSpriteEx)
    if (char.mapping_offset == 0x146620 && !u8[0xffffe654] && !(char.control_flags & 0x01) && OPG_Sonic_Sleep && debug_mode.state == 0)
        return key

    return base.SeparateSprites.getSpriteKeyForCharacterRendering(character, animationSprite, animationSpriteEx)
}

// Untransform from a super state when you lose a life
// part 1
//# address-hook(0x010366) end(0x01036c)
function void Character.Die()
{
    DeactivateSuper()
    base.Character.Die()
}

// part 2
//# address-hook(0x01036e) end(0x0103b8)
function void Character.Die_internal()
{
    DeactivateSuper()
    base.Character.Die_internal()
}

// part 3
function void Character.Die_noSound()
{
    DeactivateSuper()
    base.Character.Die_noSound()
}

// part 4
function void DeactivateSuper()
{
    if A0 == 0xffffb000 && (super.active || super.active.tails)
        Character.cancelSuperTransformation()
}

// part 5
function void Character.UpdateDrownedState.shared()
{
	DeactivateSuper()
	base.Character.UpdateDrownedState.shared()
}

global bool OPG_STailsJumpHeight

// Tails jumps higher when he's super/hyper
//# translated(0x0117da) end(0x0118ba)
//# translated(0x015002) end(0x0150d8)
//# translated(0x017710) end(0x0177e8)
function bool Character.CheckStartJump()
{
	if (!OPG_STailsJumpHeight)
		return base.Character.CheckStartJump()

	u8 backupChar = char.character
	u8 super = super.active
    if (char.character == CHARACTER_TAILS && super.active.tails && !u8[0xffffe654])
	{
        char.character = CHARACTER_SONIC
		super.active = true
	}
    bool result = base.Character.CheckStartJump()
    char.character = backupChar
	super.active = super
    return result
}

global bool OPG_KnucklesBSPose
// Change Knuckles to always use victory sprite instead of punching the air in the Blue Spheres Congratulations! screen
//# address-hook(0x04e000) end(0x04e00c)
function void fn04e000()
{
    base.fn04e000()
	if (OPG_KnucklesBSPose)
    	objA0.animation.sprite = 0xb4
}

// Make Knuckles use the standard win pose animation for the Blue Spheres Difficulty screen
//# address-hook(0x04e2b8) end(0x04e2ea)
function void fn04e2b8()
{
    base.fn04e2b8()
	if (OPG_KnucklesBSPose)
    	objA0.state = char.state.WIN_POSE
}
