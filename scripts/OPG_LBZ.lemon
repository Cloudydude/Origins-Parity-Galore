// Orbinaut spiked spheres fall when a orbinaut is broken
//# address-hook(0x08c6b0) end(0x08c6d0)
function void fn08c6b0()
{
    base.fn08c6b0()
    u8 SubType = 0x05
    CallTheSpikedSpheres(SubType) // look in OPG_ICZ.lemon for the function
}

// LBZ elevator peelout sfx
// part 1
//# address-hook(0x029e42) end(0x029eb0)
function void fn029e42()
{
	if !(u16[A0 + 0x38] != 0x0200 && u16[A0 + 0x38] != 0x0202) && !isSawnic() && !Mods.isModActive("Sound Additions")
	{
		u8[A4] += 2
		Audio.playAudio("peelout_charge", AudioContext.CONTEXT_SOUND)
		fn029eb2()
	}
	else
	{
        base.fn029e42()
        return
	}
}

// LBZ elevator peelout sfx
// part 2
//# address-hook(0x029eb2) end(0x029f32)
function void fn029eb2()
{
    base.fn029eb2()
    if !(u16[A0 + 0x3c] < 0x0180) && !isSawnic() && !Mods.isModActive("Sound Additions")
        Audio.playAudio("peelout_release", AudioContext.CONTEXT_SOUND)
}

//Up and down grapple
//# address-hook(0x0290f2) end(0x029214)
function void fn0290f2() // look into how I can do this for Ray.
{
	base.fn0290f2()
	OPG_Use0x90()
}

// When a character jumps out of the eggmobile in LBZ, play a sound
//# address-hook(0x08d47c) end(0x08d4c6)
function void fn08d47c()
{
    base.fn08d47c()
	if (objA0.position.x.u16 >= 0x4440)
        playSound(0x62)
}

global u8 BurntypeBackup // This is needed so that it doesn't mess with the mod's setting when playing the game in one go
// Big Arms post defeat
// part 1
//# address-hook(0x0746d8) end(0x0746ee)
function void fn0746d8()
{
	BurntypeBackup = System.getGlobalVariableValueByName("EggmanBlue.burnType")
	objA0.update_address = 0x0746f4
    // u16 CenterScreen = camera.position.x.u16 + getScreenWidth() / 2
    // objA0.subtype2c = ((objA0.position.x.u16 <= CenterScreen)) ? 1 : 0
}

global u8 OPG_EggTimer
// part 2
//# address-hook(0x0746f4) end(0x074734)
function void fn0746f4()
{
    // Here so that Blue glasses Eggman doesn't play the incorrect frame when Eggman falls on the platform, or ground
    System.setGlobalVariableValueByName("EggmanBlue.burnType", 0)

    // Wait until defeated Robotnik drops offscreen
	if !(objA0.position.y.u16 > camera.position.y.u16 + getScreenHeight() + 0x40)
	{
		moveWithGravity(0x18)
        UpdateMovementStraightSimple()

        if (!OPG_EggTimer)
        {
            // If Eggman is too far to the left side of the screen, send him in the direction of 
            // the right side, and vice versa
            D0 = camera.position.x.u16 + (getScreenWidth() / 2) // arena center
			D0.u16 -= objA0.position.x.u16
			if (D0.u16 != 0)
			{
				D1.u8 = (D0.s16 < 0) ? 0xff : 0x00
				D0.u16 = abs(D0.s16)

				D0.u16 = (D0 << 16) / 0x8800
				if (D1.u8 != 0)
				{
					D0.s16 = -D0.s16
				}
			}

			objA0.velocity.x = D0.u16
			
			
            objA0.velocity.y = -0x380
            objA0.value3a = true // Tell the game to let the arms go when Big arms is defeated, exploding and moving
			OPG_EggTimer = 1
        }
        else if (OPG_EggTimer == 1)
        {
            CheckGroundCollision()
            if (D1.s16 <= 15 && objA0.velocity.y > 0) // velocity check needed if boss is defeated below platform
            {
                OPG_EggTimer++
                objA0.position.y.u16 -= D1.s16
                objA0.velocity.x = objA0.velocity.x / 4
                objA0.velocity.y = -0x150
                camera.screenshake.state = 0x14
                playSound(0x6e)

                objA0.animation.sprite = 5
	            objA0.flags38 |= 0x10
                spawnChildObject(0x074d14, 0x00, -12, -44)
                spawnChildObject(0x074d14, 0x02, 20, -44)
                spawnChildObject(0x074d14, 0x04, 44, -24)
                spawnChildObject(0x074d14, 0x06, -12, -4)
                spawnChildObject(0x074d14, 0x08, 20, -4)
            }
        }

		DrawObject()
		return
	}


    // Why is this here?
    // Well, moveWithGravity(), or UpdateMovementStraightSimple(), not sure which?
    // One of them messes with the coordinates for the Eggmobile during Knuckles' Big Arms,
    // after it's defeated.
    bool isKnucklesFight = (camera.position.y.u16 < 0x0500)
    if (isKnucklesFight)
    {
        objA0.position.x.u16 = 0x4340
        objA0.position.y.u16 = (camera.position.y.u16 - 0x40)
    }

#if STANDALONE
	if (!isKnucklesFight)
	{
		// This was Sonic's boss fight against Big Arms, continue now as if Big Arms was skipped
		objA0.update_address = 0x072b46
	}
	else
#endif
	{
		objA0.update_address = 0x07473a

		objA0.render_flags &= ~render_flag.VISIBLE
		objA0.render_flags |= render_flag.FLIP_X
		objA0.flags38 |= 0x20

		camera.position.x.u16 += 0x40
		D2.u16 = objA0.position.x.u16	// Needed?
		fn0694aa()
	}
	System.setGlobalVariableValueByName("EggmanBlue.burnType", BurntypeBackup)
}

// Big Arms' arms
// part 1
//# address-hook(0x0749d0) end(0x0749e0)
function void fn0749d0()
{
    if (LetTheArmsFall())
        return
    base.fn0749d0()
}

// part 2
//# address-hook(0x074ad0) end(0x074af4)
function void fn074ad0()
{
    if (LetTheArmsFall())
        return
    base.fn074ad0()
}

// part 3
//# address-hook(0x074b3c) end(0x074b70)
function void fn074b3c()
{
    if (LetTheArmsFall())
        return
    base.fn074b3c()
}

// part 4
//# address-hook(0x074b76) end(0x074b98)
function void fn074b76()
{
    if (LetTheArmsFall())
        return
    base.fn074b76()
}

// part 5
function bool LetTheArmsFall()
{
    A1 = 0xffff0000 + u16[A0 + 0x46]
	if (u8[A1 + 0x2a] & 0x80)
	{
        if (!boss.remaining_hits && !DropBigArms_Arms())
        {
            DrawObject()
            return true
        }
	}
    return false
}

// part 6
// Maybe it's a bit extreme, but I'm not creating a global variable
// and reseting it in a common function that could get overwritten
// by another mod.
function bool DropBigArms_Arms()
{
	A2 = 0xffffb000
    s16 count = 0x6d
    while (count >= 0)
    {
        // Go to the next object
        A2 += 0x4a
        --count
		if (u32[A2] == 0x0746f4) // Search for the address that calls Big Arms defeat sequence
            return u8[A2 + 0x3a] // true
    }
	return false
}
